using System.Xml;
using System.Xml.Serialization;

namespace RepositoryPattern.StorageՕptions
{
    public static class OnXml
    {
        public static void WriteByReflection<T>(this IEnumerable<T> Data, string Path)
        {
            using XmlWriter writer = XmlWriter.Create(Path + @".xml");

            writer.WriteStartDocument();

            writer.WriteComment("This file is generated by the program.");

            Type type = typeof(T);

            writer.WriteStartElement($"{type.Name}s");
            foreach (var item in Data)
            {
                writer.WriteStartElement(type.Name);

                foreach (var Properti in type.GetProperties())
                {
                    var value = Properti.GetValue(item).ToString();
                    writer.WriteElementString(Properti.Name, value);
                }
                writer.WriteEndElement();

            }

            writer.WriteEndElement();
            writer.WriteEndDocument();
            writer.Flush();
        }

        internal static List<T> Load<T>(string filename)
        {
            filename += ".xml";
            XmlSerializer xmlSerializer = new(typeof(List<T>));
            using FileStream fs = new(filename, FileMode.OpenOrCreate);
            if (fs.Length == 0)
            {
                return new List<T>();
            }

            return (List<T>)xmlSerializer.Deserialize(fs);
        }

        internal static void Write<T>(List<T> source, string filename)
        {
            filename += ".xml";
            XmlSerializer xmlSerializer = new(typeof(List<T>));
            using TextWriter writer = new StreamWriter(filename);
            xmlSerializer.Serialize(writer, source);
        }

    }
}
